ext {
  snippetsDir = file("/build/docs/generated-snippets")
  imagePrefix = (project.findProperty('imagePrefix') ? project.findProperty('imagePrefix') + '/' : '')
  imageTagLatest = project.hasProperty('imageTagLatest')
}

apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'nebula.maven-publish'

bootRepackage {
  mainClass = 'ru.ratauth.server.RatAuthApplication'
}

dependencies {
  //commons
  compile project(':domain')
  compile 'org.apache.commons:commons-lang3:'
//  provided 'javax.servlet:javax.servlet-api'
  compile 'net.logstash.logback:logstash-logback-encoder'

  //web/reactive
  compile 'org.springframework.boot:spring-boot-starter-actuator'
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.cloud:spring-cloud-starter-eureka'
  compile 'org.springframework.cloud:spring-cloud-config-client'
  compile 'org.springframework.retry:spring-retry'

  compile 'io.ratpack:ratpack-rx'
  compile 'io.ratpack:ratpack-spring-boot'
  compile 'io.ratpack:ratpack-groovy'
//  provided 'javax.servlet:javax.servlet-api'
  compile 'com.google.inject:guice'

  //local
  compile project(':domain')
  compile 'ru.ratauth.providers:auth-mongo'
  compile 'ru.ratauth.providers:auth-identity-mongo'
  compile 'ru.alfabank.providers:provider-dca'

  //crypto
  compile 'com.nimbusds:nimbus-jose-jwt'

  //docs/test
  testCompile 'org.springframework.restdocs:spring-restdocs-restassured:1.1.0.RELEASE'
  testCompile 'org.springframework.boot:spring-boot-starter-test'

  dockerJava 'com.github.docker-java:docker-java:3.0.6'
  dockerJava 'cglib:cglib:3.2.0'
}

task cleanTempDirs(type: Delete) {
  delete fileTree(dir: snippetsDir)
}

test {
  outputs.dir snippetsDir
  dependsOn cleanTempDirs
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

docker {
  url = "unix:///var/run/docker.sock"
}

task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/docker/Dockerfile')
    from 'java:8-alpine'
    maintainer 'Tolkachev Kirill "tolk.kv@gmail.com"'
    volume '/tmp'
    jar.outputs.files.filter { it.name.endsWith '.jar' } each {
      addFile it.name, "/$it.name"
    }
    exposePort 5050
    entryPoint 'java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/server.jar', '--spring.profiles.active=local'
}

task copyJars(type: Copy){
  from(jar.outputs.files)
  into('build/docker/')
}

task buildImage(type: DockerBuildImage) {
    dependsOn build, copyJars, createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag "${imagePrefix}ratauth:${imageTagLatest ? 'latest' : project.version.toString().replace('+','.')}"
}


